library(cowplot)
library(streamMetabolizer)
library(lubridate)
## Set wd and read in raw .txt files
getwd()
# Set wd to proper place using "Files"
raw <- ldply(list.files(pattern = "txt"), function(filename) {
dum = read.table(filename, sep = ",", skip=3, header=F)
return(dum)
})
colnames(raw) <- c("Time",'Temp',"DO","Q")
raw$Time <- as.POSIXct(raw$Time, origin="1970-01-01")
head(raw, lines=5)
sapply(raw, class)
## Visualize
plot_grid(
ggplot(raw, aes(Time, DO)) + geom_point(),
ggplot(raw, aes(Time, Temp)) + geom_point(),
ggplot(raw, aes(Time, Q)) + geom_point(),
ncol=1, align="hv")
## Select desired datetime range
#raw <- subset(raw, Time > "2018-08-16 11:00:00" & Time < "2018-08-23 07:15:00")
## Write compiled csv
#write.csv(raw, "2018_08_23_Blaine_DOcompiled.csv")
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/Picarro/Picarro raw data files/2018_09_28_OakCreek")
library(plyr)
library(dplyr)
library(readr)
library(ggplot2)
library(cowplot)
library(reshape2)
## Prior to running the rest of the code
## 1) Set the wd to the raw Picarro dat files
#setwd("/Users/bobhall/Dropbox/Picarro/Picarro raw data files/2018_07_13_Roys/")
###########
## IMPORT
###########
## Import meta data for each day:  In this case metadata consists of a sample identifier, and time stamp, where time stamp is when the sample syring hits about 15mL and it
## looks like the trace is leveling off for that sample.  This metadata can and should have other stuff in it, such as sample location, collection time,
## pH, volume of sample, volume of equlibration gas (typically 70mL), temp of equilibration
meta <- read.table("2018_09_28_OakCreek.txt", sep=",",header=T)
meta$DATETIME <- as.POSIXct(as.character(meta$ResetTime), format="%Y-%m-%d %H:%M:%S")
meta$samplenum<-seq(1:length(meta$ResetTime))
filelist <-list.files( pattern="dat", full.names = TRUE)  ##makes a vector of that day's files
rawdata <- list()  #empty list
#below loops over all the files making a list containg a tibble for each file and stuffing it into a list
for(f in filelist) {
cat("Reading", f, "\n") #no idea why we need this
read_table(f) %>%
select(DATE, TIME, ALARM_STATUS, MPVPosition, `12CO2_dry`, Delta_Raw_iCO2, HP_12CH4, `HP_Delta_iCH4_Raw`) -> rawdata[[f]] #add whichever things we want here
}
rawdata <- bind_rows(rawdata)
## Fix datetime
rawdata$DATETIME <- lubridate::ymd_hms(paste(rawdata$DATE, rawdata$TIME))
rawdata$DATETIME <- as.POSIXct(as.character(rawdata$DATETIME), format="%Y-%m-%d %H:%M:%S")
# Get rid of unneeded fields
rawdata$DATE <- rawdata$TIME <- NULL
##average data for each second where we have a measure.  Not optional
rawdata<- rawdata %>% group_by(as.numeric(rawdata$DATETIME)) %>% summarise_all(funs(mean))
#Plot it. Look ok?
plot(rawdata$DATETIME,rawdata$`12CO2_dry`)
plot(rawdata$DATETIME,rawdata$Delta_Raw_iCO2)
plot(rawdata$DATETIME,rawdata$HP_12CH4)
plot(rawdata$DATETIME,rawdata$`HP_Delta_iCH4_Raw`)
View(rawdata)
##get rid of all the early in the day data to make a smaller file.  This step is optional
rawdata <- subset(rawdata, rawdata$DATETIME > "2018-09-28 18:00:00")
#Plot it. Look ok?
plot(rawdata$DATETIME,rawdata$`12CO2_dry`)
##get rid of all the early in the day data to make a smaller file.  This step is optional
rawdata <- subset(rawdata, rawdata$DATETIME > "2018-09-28 20:00:00")
#Plot it. Look ok?
plot(rawdata$DATETIME,rawdata$`12CO2_dry`)
##if ok, then name the rawdat file for that day here
dat<-rawdata
colnames(dat)[4:7] <- c("CO2","Delta_iCO2","CH4","Delta_iCH4")
meta$ENDTIME<-meta$DATETIME+30
subdat<-list()
for(i in 1:length(meta$samplenum)){
subdat[[i]]<-subset(dat, DATETIME>meta$DATETIME[i]  & DATETIME< meta$ENDTIME[i])
subdat[[i]]$samplenum <-i
}
subdat <- bind_rows(subdat)
## Plot
subdat_melt <- melt(subdat[,4:9], id.vars=c("DATETIME","samplenum"))
ggplot(subdat_melt, aes(DATETIME, value, color=samplenum))+
geom_point()+
facet_wrap(~variable, ncol=2, scales = "free")
## Summarize per sample
subdatsum<- subdat %>% group_by(samplenum) %>% summarise(CO2=mean(CO2), delCO2=mean(Delta_iCO2),
CH4=mean(CH4), delCH4=mean(Delta_iCH4) )
##merge with meta, and give it a new name
#Thinking about the metafile, here is what should also go in
#water_temp, equil_temp, pH, ANC, air_vol (it won't always be 70), baro_press (absolute, mm Hg)
#not the  kH_CO2 because that is a derived value that we will calc each time
sum_file<- full_join(meta,subdatsum)  #there you go, joining by samplenum
sum_file <- na.omit(sum_file)
## Plot
sum_file_melt <- melt(sum_file[,c("CO2","delCO2","CH4","delCH4","DATETIME","samplenum")], id.vars=c("DATETIME","samplenum"))
ggplot(sum_file_melt, aes(DATETIME, value, color=samplenum))+
geom_point()+
facet_wrap(~variable, ncol=2, scales = "free")
## merge again with other data if available
notes <- read.table("2018_09_28_OakCreek_notes.txt", sep=",",header=T)
sum_file <- merge(sum_file, notes, by="SampleID")
############
## Export
###########
write.csv(sum_file, "2018_09_28_OakDielprocessed.csv")
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/C isotopes/Diel Sampling/2018_09_25_OakCreek_Processed")
library(lubridate)
library(plyr)
library(dplyr)
library(readr)
library(ggplot2)
library(cowplot)
library(reshape2)
library(data.table)
library(bayesbio)
library(tidyr)
library(lubridate)
library(plyr)
library(dplyr)
library(readr)
library(ggplot2)
library(cowplot)
library(reshape2)
library(data.table)
library(bayesbio)
library(tidyr)
## merge again with other data if available
notes <- read.table("2018_09_28_OakCreek_notes.txt", sep=",",header=T)
notes <- notes %>%
separate(SampleID, c("Site","Date","Time"))
## merge again with other data if available
notes <- read.table("2018_09_28_OakCreek_notes.txt", sep=",",header=T)
notes <- notes %>%
separate(SampleID, c("Site","Date","Time"))
View(notes)
notes$Date <- revalue(notes$Date, c("926" = "2018-09-26","927"="2018-09-27","928"="2018-09-28"))
notes$Time <- as.numeric(notes$Time)
notes$Time <- ifelse(notes$Time < 1000, yes= paste(substring(notes$Time, 1, 1), substring(notes$Time, 2, 3), sep = ":"),
no = ifelse(notes$Time >= 1000, yes=paste(substring(notes$Time, 1, 2), substring(notes$Time, 3, 4), sep = ":"), no=NA))
notes$Time <- revalue(notes$Time, c("0:"="0:00"))
notes$DateTime <- lubridate::ymd_hm(paste(notes$Date,notes$Time))
notes$DateTime <- as.POSIXct(as.character(notes$DateTime), format="%Y-%m-%d %H:%M:%S")
#######################################################
## Picarro Processed Isotope Data & Other Parameters ##
#######################################################
iso <- read.csv("2018_09_28_OakDiel_Picarro.csv", header=T)
## Separate SampleID
sapply(iso, class)
iso$SampleID <- as.character(iso$SampleID)
iso <- iso %>%
separate(SampleID, c("Site","Date","Time"))
iso$Date <- revalue(iso$Date, c("926" = "2018-09-26","927"="2018-09-27","928"="2018-09-28"))
View(iso)
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/Picarro/Picarro raw data files/2018_09_28_OakCreek")
library(plyr)
library(dplyr)
library(readr)
library(ggplot2)
library(cowplot)
library(reshape2)
## Prior to running the rest of the code
## 1) Set the wd to the raw Picarro dat files
#setwd("/Users/bobhall/Dropbox/Picarro/Picarro raw data files/2018_07_13_Roys/")
###########
## IMPORT
###########
## Import meta data for each day:  In this case metadata consists of a sample identifier, and time stamp, where time stamp is when the sample syring hits about 15mL and it
## looks like the trace is leveling off for that sample.  This metadata can and should have other stuff in it, such as sample location, collection time,
## pH, volume of sample, volume of equlibration gas (typically 70mL), temp of equilibration
meta <- read.table("2018_09_28_OakCreek.txt", sep=",",header=T)
meta$DATETIME <- as.POSIXct(as.character(meta$ResetTime), format="%Y-%m-%d %H:%M:%S")
meta$samplenum<-seq(1:length(meta$ResetTime))
## Import the raw data
filelist <-list.files( pattern="dat", full.names = TRUE)  ##makes a vector of that day's files
rawdata <- list()  #empty list
#below loops over all the files making a list containg a tibble for each file and stuffing it into a list
for(f in filelist) {
cat("Reading", f, "\n") #no idea why we need this
read_table(f) %>%
select(DATE, TIME, ALARM_STATUS, MPVPosition, `12CO2_dry`, Delta_Raw_iCO2, HP_12CH4, `HP_Delta_iCH4_Raw`) -> rawdata[[f]] #add whichever things we want here
}
rawdata <- bind_rows(rawdata)
## Fix datetime
rawdata$DATETIME <- lubridate::ymd_hms(paste(rawdata$DATE, rawdata$TIME))
rawdata$DATETIME <- as.POSIXct(as.character(rawdata$DATETIME), format="%Y-%m-%d %H:%M:%S")
# Get rid of unneeded fields
rawdata$DATE <- rawdata$TIME <- NULL
##average data for each second where we have a measure.  Not optional
rawdata<- rawdata %>% group_by(as.numeric(rawdata$DATETIME)) %>% summarise_all(funs(mean))
#Plot it. Look ok?
plot(rawdata$DATETIME,rawdata$`12CO2_dry`)
plot(rawdata$DATETIME,rawdata$Delta_Raw_iCO2)
plot(rawdata$DATETIME,rawdata$HP_12CH4)
plot(rawdata$DATETIME,rawdata$`HP_Delta_iCH4_Raw`)
##get rid of all the early in the day data to make a smaller file.  This step is optional
rawdata <- subset(rawdata, rawdata$DATETIME > "2018-09-28 20:00:00")
##if ok, then name the rawdat file for that day here
dat<-rawdata
colnames(dat)[4:7] <- c("CO2","Delta_iCO2","CH4","Delta_iCH4")
#############
## SUBSET
#############
## Subset the main datafile based on sample time + some amount of time,
## 40 seconds appears correct, but always check this time.
## To short and we lost data.  Too long and we average off the plateau
meta$ENDTIME<-meta$DATETIME+30
subdat<-list()
for(i in 1:length(meta$samplenum)){
subdat[[i]]<-subset(dat, DATETIME>meta$DATETIME[i]  & DATETIME< meta$ENDTIME[i])
subdat[[i]]$samplenum <-i
}
subdat <- bind_rows(subdat)
## Plot
subdat_melt <- melt(subdat[,4:9], id.vars=c("DATETIME","samplenum"))
ggplot(subdat_melt, aes(DATETIME, value, color=samplenum))+
geom_point()+
facet_wrap(~variable, ncol=2, scales = "free")
## Summarize per sample
subdatsum<- subdat %>% group_by(samplenum) %>% summarise(CO2=mean(CO2), delCO2=mean(Delta_iCO2),
CH4=mean(CH4), delCH4=mean(Delta_iCH4) )
View(subdatsum)
sum_file<- full_join(meta,subdatsum)  #there you go, joining by samplenum
View(sum_file)
## Remove standards
sum_file <- na.omit(sum_file)
## Plot
sum_file_melt <- melt(sum_file[,c("CO2","delCO2","CH4","delCH4","DATETIME","samplenum")], id.vars=c("DATETIME","samplenum"))
ggplot(sum_file_melt, aes(DATETIME, value, color=samplenum))+
geom_point()+
facet_wrap(~variable, ncol=2, scales = "free")
## merge again with other data if available
notes <- read.table("2018_09_28_OakCreek_notes.txt", sep=",",header=T)
View(notes)
notes <- notes %>%
separate(Syringes, c("SyringeA","SyringeB","SyringeC"))
names(sum_file)
sumA <- merge(sum_file, notes, by.x="Syringe", by.y = "SynringeA")
names(notes)
sumA <- merge(sum_file, notes, by.x="Syringe", by.y = "SyringeA")
View(sumA)
sumA <- merge(sum_file, notes, by.x="Syringe", by.y = "SyringeA")
sumB <- merge(sum_file, notes, by.x="Syringe", by.y = "SyringeB")
sumC <- merge(sum_file, notes, by.x="Syringe", by.y = "SyringeC")
sum_file <- rbind(sumA, sumB, sumC)
View(sumB)
names(sumA)
sum_file <- rbind(sumA[,1:17], sumB[,1:17], sumC[,1:17])
############
## Export
###########
write.csv(sum_file, "2018_09_28_OakDielprocessed.csv")
names(sum_file)
## Fix names
sum_file <- sum_file[,c(1:4,9:17)]
names(sum_file)
colnames(sum_file)[9] <- "SampleID"
############
## Export
###########
write.csv(sum_file, "2018_09_28_OakDielprocessed.csv")
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/C isotopes/Diel Sampling/2018_09_25_OakCreek_Processed")
library(lubridate)
library(plyr)
library(dplyr)
library(readr)
library(ggplot2)
library(cowplot)
library(reshape2)
library(data.table)
library(bayesbio)
library(tidyr)
## Step 1: setwd
########################################################################################
## Import notes, CO2, O2, processed Picarro data, and pH sensor data
########################################################################################
###########
## Notes ##
###########
## merge again with other data if available
notes <- read.table("2018_09_28_OakCreek_notes.txt", sep=",",header=T)
notes <- notes %>%
separate(SampleID, c("Site","Date","Time"))
notes$Date <- revalue(notes$Date, c("926" = "2018-09-26","927"="2018-09-27","928"="2018-09-28"))
notes$Time <- as.numeric(notes$Time)
notes$Time <- ifelse(notes$Time < 1000, yes= paste(substring(notes$Time, 1, 1), substring(notes$Time, 2, 3), sep = ":"),
no = ifelse(notes$Time >= 1000, yes=paste(substring(notes$Time, 1, 2), substring(notes$Time, 3, 4), sep = ":"), no=NA))
notes$Time <- revalue(notes$Time, c("0:"="0:00"))
notes$DateTime <- lubridate::ymd_hm(paste(notes$Date,notes$Time))
notes$DateTime <- as.POSIXct(as.character(notes$DateTime), format="%Y-%m-%d %H:%M:%S")
#######################################################
## Picarro Processed Isotope Data & Other Parameters ##
#######################################################
iso <- read.csv("2018_09_28_OakDiel_Picarro.csv", header=T)
## Separate SampleID
sapply(iso, class)
iso$SampleID <- as.character(iso$SampleID)
iso <- iso %>%
separate(SampleID, c("Site","Date","Time"))
iso$Date <- revalue(iso$Date, c("926" = "2018-09-26","927"="2018-09-27","928"="2018-09-28"))
iso$Time <- as.numeric(iso$Time)
iso$Time <- ifelse(iso$Time < 1000, yes= paste(substring(iso$Time, 1, 1), substring(iso$Time, 2, 3), sep = ":"),
no = ifelse(iso$Time >= 1000, yes=paste(substring(iso$Time, 1, 2), substring(iso$Time, 3, 4), sep = ":"), no=NA))
iso$Time <- revalue(iso$Time, c("0:"="0:00"))
iso$SampleDateTime <- lubridate::ymd_hm(paste(iso$Date,iso$Time))
iso$SampleDateTime <- as.POSIXct(as.character(iso$SampleDateTime), format="%Y-%m-%d %H:%M:%S",tz = "UTC")
View(iso)
## Calculate actual CO2 conc - Picarro
names(iso)
## For Picarro Data -- already has notes data attached
notes_iso <- iso
## Convert barometric pressure into atm from inHg to mmHg to atm
alt <- 1326 #meter elevation at Blaine
notes_iso$Baro_atm <- ( notes_iso$Baro_inHg*25.4*exp( (-9.80665*0.0289644*alt)/(8.31447*(273.15+15)) ) )/760
CO2calc<-function(x) {
x$kH_CO2<-29* exp( 2400 * ((1/(x$equiltemp+273.15)) - 1/(298.15)) ) #temp correction for Henry's law
x$CO2_mol_water<- x$CO2_vol_air  / x$kH_CO2
x$CO2_mol_air<- x$CO2_vol_air/ ((x$equiltemp+273.15)*0.08026/x$pressure)
x$CO2_mmolm3<-(x$CO2_mol_water*x$volwater + x$CO2_mol_air*x$volair)/100 # Âµmol/L or mmol/m3
x$CO2_uatm <- (x$CO2_mmolm3/1000)*x$pressure
return(x)
}
## Need to set certain columns to desired values if all the same
## If each sample is different, simple set the column to a column specified in the metadata file
names(notes_iso)
notes_iso$CO2_vol_air <- notes_iso$CO2
notes_iso$equiltemp <- notes_iso$WaterTemp_C
notes_iso$volair <- notes_iso$air_mL
notes_iso$volwater <- notes_iso$H2O_mL
notes_iso$pressure <- notes_iso$Baro_atm
## Run function on datafile
notes_iso <- CO2calc(notes_iso)
## Summarize
notes_iso$DateTime <- notes_iso$SampleDateTime
iso_melt <- melt(notes_iso[,c("CO2","delCO2","CH4","delCH4","CO2_mmolm3","DateTime","Site")], id.vars=c("DateTime","Site"))
ggplot(iso_melt, aes(DateTime, value, color=Site))+
geom_point()+
facet_wrap(~variable, ncol=2, scales = "free")
library(lubridate)
library(plyr)
library(dplyr)
library(readr)
library(ggplot2)
library(cowplot)
library(reshape2)
library(data.table)
library(bayesbio)
library(tidyr)
library(lubridate)
library(plyr)
library(dplyr)
library(readr)
library(ggplot2)
library(cowplot)
library(reshape2)
library(data.table)
library(bayesbio)
library(tidyr)
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/C isotopes/Diel Sampling/2018_09_25_OakCreek_Processed")
## merge again with other data if available
notes <- read.table("2018_09_28_OakCreek_notes.txt", sep=",",header=T)
notes <- notes %>%
separate(SampleID, c("Site","Date","Time"))
notes$Date <- revalue(notes$Date, c("926" = "2018-09-26","927"="2018-09-27","928"="2018-09-28"))
notes$Time <- as.numeric(notes$Time)
notes$Time <- ifelse(notes$Time < 1000, yes= paste(substring(notes$Time, 1, 1), substring(notes$Time, 2, 3), sep = ":"),
no = ifelse(notes$Time >= 1000, yes=paste(substring(notes$Time, 1, 2), substring(notes$Time, 3, 4), sep = ":"), no=NA))
notes$Time <- revalue(notes$Time, c("0:"="0:00"))
notes$DateTime <- lubridate::ymd_hm(paste(notes$Date,notes$Time))
notes$DateTime <- as.POSIXct(as.character(notes$DateTime), format="%Y-%m-%d %H:%M:%S")
#########
## CO2 ##
#########
CO2raw <- read.csv("2018_08_23_BlaineCreek_eosense.csv", header=T)
## Fix datetime
CO2raw$DateTime <- lubridate::mdy_hms(paste(CO2raw$Date, CO2raw$Time))
CO2raw$DateTime <- as.POSIXct(as.character(CO2raw$DateTime), format="%Y-%m-%d %H:%M:%S")
## Fix names
CO2rawdata <- CO2raw[,c(4,5,7,9)]
names(CO2rawdata) <- c("CO2ppm_LowR", "TempC","CO2ppm_HighR","DateTime")
CO2rawdata[,1:3] <- apply(CO2rawdata[,1:3],2,function(x) as.numeric(as.character(x)))
sapply(CO2rawdata, class)
CO2 <- CO2rawdata
## Visualize
ggplot(CO2, aes(DateTime, CO2ppm_LowR)) +
geom_point()+
geom_point(aes(DateTime, TempC*50), color="red")+
scale_y_continuous(limits=c(0,1500), sec.axis = sec_axis(~./50, name=expression("Temp C")))
## Calculate actual CO2 conc - Eosense
names(CO2)
## Import filled 5 minute Baro from FLBS North Shore, MT station
BP <- read.csv("Baro_1sec_BlaineCreek_2018_08_16.csv", header=T)
BP$DateTime <- as.POSIXct(as.character(BP$DateTime), format="%Y-%m-%d %H:%M:%S")
## Convert barometric pressure into atm from mmHg to atm
alt <- 901 #meter elevation at Blaine
BP$Baro_atm <- (BP$Baro_mmHg*exp( (-9.80665*0.0289644*alt)/(8.31447*(273.15+15)) ) )/760
CO2_BP <- merge(CO2, BP, by="DateTime")
names(CO2_BP)
Converting2DissolvedConc <- function(x){
#PV = nRT, gas conversion factor in L/mol
x$V <- (1*0.08206*(x$TempC+273.15))/x$Baro_atm
#Hcc Henry's law dimensionless proportionality constant
x$kH_CO2 <- 29.41*exp(2400*((1/(x$TempC+273.15) - 1/(298.15)))) ## Van't Hoff equation
x$Hcc_CO2 <- 1/(x$kH_CO2)
#Low Range CO2
#Converting Cg into umol/L (Cgas)
x$Cgas_low <- x$CO2ppm_LowR/(x$V)
#Finding concentration in aqueous soln (Caq) in mol/L
x$Caq_molL_low <- x$Cgas_low*x$Hcc_CO2
x$pCO2_uatm_Low <- x$Caq_molL_low*x$Baro_atm*1000
#converting to mg/L
#x$Caq_mgL_low <- x$Caq_molL_low*44.01*1000
#high Range CO2
#Converting Cg into umol/L (Cgas)
x$Cgas_high <- x$CO2ppm_HighR/(x$V)
#Finding concentration in aqueous soln (Caq) in mol/L
x$Caq_molL_high <- x$Cgas_high*x$Hcc_CO2
x$pCO2_uatm_high <- x$Caq_molL_high*x$Baro_atm*1000
#converting to mg/L
#x$Caq_mgL_high <- x$Caq_molL_high*44.01*1000
return(x)
}
CO2_conc <- Converting2DissolvedConc(CO2_BP)
## Select Date Range of interest
CO2_conc_diel <- subset(CO2_conc, DateTime > "2018-08-22 05:30:00" & DateTime < "2018-08-23 06:30:00")
########
## O2 ##
########
O2raw <- read.csv("2018_08_23_Blaine_DOcompiled.csv", header=T)
O2raw$DateTime <- as.POSIXct(as.character(O2raw$Time), format="%Y-%m-%d %H:%M:%S")
## Visualize
plot_grid(
ggplot(O2raw, aes(DateTime, DO)) + geom_point(),
ggplot(O2raw, aes(DateTime, Temp)) + geom_point(),
ggplot(O2raw, aes(DateTime, Q)) + geom_point(),
ncol=1, align="hv")
## Select Date Range of interest
O2 <- subset(O2raw, DateTime > "2018-08-22 05:30:00" & DateTime < "2018-08-23 06:30:00")
## Visualize
ggplot(O2, aes(DateTime, DO)) +
geom_point()+
geom_point(aes(DateTime, Temp/2), color="red")+
scale_y_continuous(limits=c(5,11), sec.axis = sec_axis(~.*2, name=expression("Temp C")))
iso <- read.csv("2018_09_28_OakDiel_Picarro.csv", header=T)
## Based on notes from sample run on Picarro -- remove samples that failed
## Separate SampleID
sapply(iso, class)
iso$SampleID <- as.character(iso$SampleID)
iso <- iso %>%
separate(SampleID, c("Site","Date","Time"))
iso$Date <- revalue(iso$Date, c("926" = "2018-09-26","927"="2018-09-27","928"="2018-09-28"))
iso$Time <- as.numeric(iso$Time)
iso$Time <- ifelse(iso$Time < 1000, yes= paste(substring(iso$Time, 1, 1), substring(iso$Time, 2, 3), sep = ":"),
no = ifelse(iso$Time >= 1000, yes=paste(substring(iso$Time, 1, 2), substring(iso$Time, 3, 4), sep = ":"), no=NA))
iso$Time <- revalue(iso$Time, c("0:"="0:00"))
iso$SampleDateTime <- lubridate::ymd_hm(paste(iso$Date,iso$Time))
iso$SampleDateTime <- as.POSIXct(as.character(iso$SampleDateTime), format="%Y-%m-%d %H:%M:%S",tz = "UTC")
## Calculate actual CO2 conc - Picarro
names(iso)
## For Picarro Data -- already has notes data attached
notes_iso <- iso
## Convert barometric pressure into atm from inHg to mmHg to atm
alt <- 1326 #meter elevation at Sedona
notes_iso$Baro_atm <- ( notes_iso$Baro_inHg*25.4*exp( (-9.80665*0.0289644*alt)/(8.31447*(273.15+15)) ) )/760
CO2calc<-function(x) {
x$kH_CO2<-29* exp( 2400 * ((1/(x$equiltemp+273.15)) - 1/(298.15)) ) #temp correction for Henry's law
x$CO2_mol_water<- x$CO2_vol_air  / x$kH_CO2
x$CO2_mol_air<- x$CO2_vol_air/ ((x$equiltemp+273.15)*0.08026/x$pressure)
x$CO2_mmolm3<-(x$CO2_mol_water*x$volwater + x$CO2_mol_air*x$volair)/100 # Âµmol/L or mmol/m3
x$CO2_uatm <- (x$CO2_mmolm3/1000)*x$pressure
return(x)
}
## Need to set certain columns to desired values if all the same
## If each sample is different, simple set the column to a column specified in the metadata file
names(notes_iso)
notes_iso$CO2_vol_air <- notes_iso$CO2
notes_iso$equiltemp <- notes_iso$WaterTemp_C
notes_iso$volair <- notes_iso$air_mL
notes_iso$volwater <- notes_iso$H2O_mL
notes_iso$pressure <- notes_iso$Baro_atm
## Run function on datafile
notes_iso <- CO2calc(notes_iso)
## Summarize
notes_iso$DateTime <- notes_iso$SampleDateTime
iso_melt <- melt(notes_iso[,c("CO2","delCO2","CH4","delCH4","CO2_mmolm3","DateTime","Site")], id.vars=c("DateTime","Site"))
ggplot(iso_melt, aes(DateTime, value, color=Site))+
geom_point()+
facet_wrap(~variable, ncol=2, scales = "free")
iso_mean <- dcast(iso_melt, DateTime + Site ~ variable, fun.aggregate = mean)
iso_sd <- dcast(iso_melt, DateTime + Site ~ variable, fun.aggregate = sd)
iso_mean_melt <- melt(iso_mean[,c("CO2","delCO2","CH4","delCH4","CO2_mmolm3","DateTime","Site")], id.vars=c("DateTime","Site"))
iso_sd_melt <- melt(iso_sd[,c("CO2","delCO2","CH4","delCH4","CO2_mmolm3","DateTime","Site")], id.vars=c("DateTime","Site"))
iso_mean_sd <- merge(iso_mean_melt, iso_sd_melt, by=c("DateTime","Site","variable"))
colnames(iso_mean_sd)[4:5] <- c("Mean","SD")
sapply(iso_mean_sd, class)
## Visualize
ggplot(iso_mean_sd, aes(DateTime, Mean, color=Site))+
geom_point(size=3)+
geom_errorbar(aes(ymax=Mean-SD, ymin=Mean+SD), width=.2, position=position_dodge(.9))+
facet_wrap(~variable, ncol=2, scales = "free")+
theme(axis.title = element_blank(),
strip.background = element_rect(fill = "white", color="black",linetype = "solid"),
panel.border = element_rect(color = "black", linetype = "solid"),
legend.position = "none",
axis.text.x = element_text(angle=45, hjust=1))
#scale_color_manual(values = c("B" = "red3"))
#scale_x_datetime(breaks = iso_mean_sd$DateTime)
## Export
write.csv(iso_mean_sd,"2018_09_28_OakCreek_iso_CO2conc.csv")
