library(dplyr)
library(readr)
library(ggplot2)
library(cowplot)
library(reshape2)
library(data.table)
library(bayesbio)
library(tidyr)
## Setwd
########################################################################################
## Import CO2, O2, processed Picarro data, and pH sensor data
########################################################################################
#########
## CO2 ##
#########
CO2raw <- read.csv("2018_08_10_BeaverCreek.csv", header=T)
## Fix datetime
CO2raw$DateTime <- lubridate::mdy_hms(paste(CO2raw$Date, CO2raw$Time))
CO2raw$DateTime <- as.POSIXct(as.character(CO2raw$DateTime), format="%Y-%m-%d %H:%M:%S")
## Fix names
CO2rawdata <- CO2raw[,c(4,5,7,9)]
names(CO2rawdata) <- c("CO2ppm_LowR", "TempC","CO2ppm_HighR","DateTime")
CO2rawdata[,1:3] <- apply(CO2rawdata[,1:3],2,function(x) as.numeric(as.character(x)))
sapply(CO2rawdata, class)
O2raw <- read.csv("2018_08_10_Beaver_DOcompiled.csv", header=T)
O2raw$DateTime <- as.POSIXct(as.character(O2raw$Time), format="%Y-%m-%d %H:%M:%S")
iso <- read.csv("2018_08_10_BeaverPartialDiel_Processed.csv", header=T)
names(iso)
iso$DateTime <- as.POSIXct(as.character(iso$SampleDateTime), format="%Y-%m-%d %H:%M:%S")
## Summarize
iso_melt <- melt(iso[,c("CO2","delCO2","CH4","delCH4","DateTime","Site")], id.vars=c("DateTime","Site"))
ggplot(iso_melt, aes(DateTime, value, color=Site))+
geom_point()+
facet_wrap(~variable, ncol=2, scales = "free")
iso_mean <- dcast(iso_melt, DateTime + Site ~ variable, fun.aggregate = mean)
iso_sd <- dcast(iso_melt, DateTime + Site ~ variable, fun.aggregate = sd)
iso_mean_melt <- melt(iso_mean[,c("CO2","delCO2","CH4","delCH4","DateTime","Site")], id.vars=c("DateTime","Site"))
iso_sd_melt <- melt(iso_sd[,c("CO2","delCO2","CH4","delCH4","DateTime","Site")], id.vars=c("DateTime","Site"))
iso_mean_sd <- merge(iso_mean_melt, iso_sd_melt, by=c("DateTime","Site","variable"))
colnames(iso_mean_sd)[4:5] <- c("Mean","SD")
pHraw <- read.csv("2018_08_10_Beaver_pHsensor_mV.csv", header=T)
pHraw$DateTime <- as.POSIXct(as.character(pHraw$Date), format="%m/%d/%Y %H:%M:%S")
## convert mV to pH using calibration values
m <- (10.01-7.00)/(2.84-2.01)
b <- 10.01 - (m*2.84)
pHraw$pH <- (m*pHraw$Voltage) + b
## Visualize
sapply(pHraw, class)
pH_10min <- pHraw %>%
group_by(DateTime = cut(DateTime, breaks="10 min")) %>%
summarize(pH = mean(pH))
pH_10min$DateTime <- as.POSIXct(as.character(pH_10min$DateTime), format="%Y-%m-%d %H:%M:%S")
ggplot(pH_10min, aes(DateTime, pH))+
geom_point()
notes <- read.table("2018_08_10_BeaverDiel_notes.txt", sep=",",header=T)
notes <- notes %>%
separate(SampleID, c("Site","Date","Time"))
notes$Date <- revalue(notes$Date, c("810" = "2018-08-10","89"="2018-08-09"))
notes$Time <- as.numeric(notes$Time)
notes$Time <- ifelse(notes$Time < 1000, yes= paste(substring(notes$Time, 1, 1), substring(notes$Time, 2, 3), sep = ":"),
no = ifelse(notes$Time >= 1000, yes=paste(substring(notes$Time, 1, 2), substring(notes$Time, 3, 4), sep = ":"), no=NA))
notes$Time <- revalue(notes$Time, c("0:"="0:00"))
notes$DateTime <- lubridate::ymd_hm(paste(notes$Date,notes$Time))
notes$DateTime <- as.POSIXct(as.character(notes$DateTime), format="%Y-%m-%d %H:%M:%S")
time_breaks <- c(as.POSIXct("2018-08-09 14:00:00"),
as.POSIXct("2018-08-09 18:00:00"),
as.POSIXct("2018-08-09 22:00:00"),
as.POSIXct("2018-08-10 02:00:00"),
as.POSIXct("2018-08-10 06:00:00"))
###############################
## pH sensor versus han
notes_minus5 <- notes
notes_minus5$DateTime <- notes_minus5$DateTime - minutes(5)
pH_comparison <- merge(notes_minus5[,c("DateTime","pH")], pH_10min[,c("DateTime","pH")], by="DateTime")
names(pH_comparison) <- c("DateTime","Handheld_pH","Sensor_pH")
## Visualize
plot_grid(
ggplot(pH_10min, aes(DateTime, pH))+
geom_point(size=2,color="grey40")+
geom_point(data=notes, aes(DateTime, pH), color="red2", size=3),
ggplot(pH_comparison, aes(Handheld_pH, Sensor_pH))+
geom_point(size=3)+
scale_x_continuous(limits = c(7.8, 8.4))+
scale_y_continuous(limits = c(7.8, 8.4))+
geom_abline(slope=1, size=1, linetype="dashed")+
xlab("Handheld pH")+ylab("Sensor pH"),
ncol=2)
## CO2 and CH4 isotopes
ggplot(iso_mean_sd[which(iso_mean_sd$variable %in% c("delCO2","delCH4")),], aes(DateTime, Mean, color=Site))+
geom_point(size=3)+
geom_errorbar(aes(ymax=Mean-SD, ymin=Mean+SD), width=.2, position=position_dodge(.9))+
facet_wrap(~variable, scales = "free")+
theme(axis.title = element_blank(),
strip.background = element_rect(fill = "white", color="black",linetype = "solid"),
panel.border = element_rect(color = "black", linetype = "solid"),
legend.position = "none",
axis.text.x = element_text(angle=45, hjust=1))+
scale_color_manual(values = c("BeaverDwn" = "red3"))+
scale_x_datetime(breaks = time_breaks, date_labels = "%d - %H:%M")
## CO2 and CH4 isotopes
ggplot(iso_mean_sd[which(iso_mean_sd$variable %in% c("delCO2","delCH4")),], aes(DateTime, Mean, color=Site))+
geom_point(size=3)+
geom_errorbar(aes(ymax=Mean-SD, ymin=Mean+SD), width=.2, position=position_dodge(.9))+
facet_wrap(~variable, scales = "free")+
theme(axis.title = element_blank(),
strip.background = element_rect(fill = "white", color="black",linetype = "solid"),
panel.border = element_rect(color = "black", linetype = "solid"),
legend.position = "none",
axis.text.x = element_text(angle=45, hjust=1))+
scale_color_manual(values = c("BeaverDwn" = "red3"))+
scale_x_datetime(breaks = time_breaks, date_labels = "%b %d - %H:%M")
View(CO2rawdata)
## Select Date Range of interest
CO2rawdata <- subset(CO2rawdata, DateTime > "2018-08-09 08:30:00" & DateTime < "2018-08-10 07:30:00")
## Need to set certain columns to desired values if all the same
## If each sample is different, simple set the column to a column specified in the metadata file
CO2_calc <- CO2rawdata
sum_file
## Need to set certain columns to desired values if all the same
## If each sample is different, simple set the column to a column specified in the metadata file
CO2_calc <- CO2rawdata[,c("DateTime","CO2ppm_LowR")]
## Need to set certain columns to desired values if all the same
## If each sample is different, simple set the column to a column specified in the metadata file
CO2_calc <- CO2rawdata[,c("DateTime","CO2ppm_LowR")]
CO2_calc <- merge(CO2_calc, O2raw, by="DateTime", all.x = TRUE)
View(CO2_calc)
## DO and pCO2
ggplot(O2raw, aes(DateTime, DO))+
geom_point(color="blue")+
ylab("Dissolved Oxygen (mg/L)")+
geom_point(data=CO2rawdata, aes(DateTime,CO2ppm_LowR/125))+
scale_y_continuous(limits=c(3,11), sec.axis = sec_axis(~.*125, name=expression("CO2 (mg/L)")))
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/C isotopes/Diel Sampling/2018_08_10_BeaverCreek")
library(lubridate)
library(plyr)
library(dplyr)
library(readr)
library(ggplot2)
library(cowplot)
library(reshape2)
library(data.table)
library(bayesbio)
library(tidyr)
library(lubridate)
library(plyr)
library(dplyr)
library(readr)
library(ggplot2)
library(cowplot)
library(reshape2)
library(data.table)
library(bayesbio)
library(tidyr)
pHraw <- read.csv("2018_08_10_Beaver_pHsensor_mV.csv", header=T)
pHraw$DateTime <- as.POSIXct(as.character(pHraw$Date), format="%m/%d/%Y %H:%M:%S")
## convert mV to pH using calibration values
m <- (10.01-7.00)/(2.84-2.01)
b <- 10.01 - (m*2.84)
pHraw$pH <- (m*pHraw$Voltage) + b
## Visualize
sapply(pHraw, class)
pH_10min <- pHraw %>%
group_by(DateTime = cut(DateTime, breaks="10 min")) %>%
summarize(pH = mean(pH))
pH_10min$DateTime <- as.POSIXct(as.character(pH_10min$DateTime), format="%Y-%m-%d %H:%M:%S")
ggplot(pH_10min, aes(DateTime, pH))+
geom_point()
notes <- read.table("2018_08_10_BeaverDiel_notes.txt", sep=",",header=T)
notes <- notes %>%
separate(SampleID, c("Site","Date","Time"))
notes$Date <- revalue(notes$Date, c("810" = "2018-08-10","89"="2018-08-09"))
notes$Time <- as.numeric(notes$Time)
notes$Time <- ifelse(notes$Time < 1000, yes= paste(substring(notes$Time, 1, 1), substring(notes$Time, 2, 3), sep = ":"),
no = ifelse(notes$Time >= 1000, yes=paste(substring(notes$Time, 1, 2), substring(notes$Time, 3, 4), sep = ":"), no=NA))
notes$Time <- revalue(notes$Time, c("0:"="0:00"))
notes$DateTime <- lubridate::ymd_hm(paste(notes$Date,notes$Time))
notes$DateTime <- as.POSIXct(as.character(notes$DateTime), format="%Y-%m-%d %H:%M:%S")
time_breaks <- c(as.POSIXct("2018-08-09 14:00:00"),
as.POSIXct("2018-08-09 18:00:00"),
as.POSIXct("2018-08-09 22:00:00"),
as.POSIXct("2018-08-10 02:00:00"),
as.POSIXct("2018-08-10 06:00:00"))
###############################
## pH sensor versus handheld ##
###############################
## merge to correlate
notes_minus5 <- notes
notes_minus5$DateTime <- notes_minus5$DateTime - minutes(5)
pH_comparison <- merge(notes_minus5[,c("DateTime","pH")], pH_10min[,c("DateTime","pH")], by="DateTime")
names(pH_comparison) <- c("DateTime","Handheld_pH","Sensor_pH")
## Visualize
plot_grid(
ggplot(pH_10min, aes(DateTime, pH))+
geom_point(size=2,color="grey40")+
geom_point(data=notes, aes(DateTime, pH), color="red2", size=3),
ggplot(pH_comparison, aes(Handheld_pH, Sensor_pH))+
geom_point(size=3)+
scale_x_continuous(limits = c(7.8, 8.4))+
scale_y_continuous(limits = c(7.8, 8.4))+
geom_abline(slope=1, size=1, linetype="dashed")+
xlab("Handheld pH")+ylab("Sensor pH"),
ncol=2)
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/C isotopes/Diel Sampling/Model Building")
###############################
## Import data to use & subset
###############################
# Discrete samples
pH_Alk_data <- read.csv("Diel_pH_Alk.csv", header=T)
# Time series
dat <- read.csv("Compiled_5min_ts_Blaine.csv", header=T)
head(dat)
dat$DateTime <- as.POSIXct(as.character(dat$DateTime), format="%Y-%m-%d %H:%M:%S")
# Subset
names(dat)
dat <- dat[,c("DateTime","Temp","Baro_atm","CO2ppm_LowR","PAR_filled")]
colnames(dat) <- c("DateTime","temp","baro","CO2ppm","light")
dat$CO2_molL <- (dat$CO2ppm/38)*10^-6
## Equilibrium constants
K1calc<- function(temp) { 10^( (-3404.71/(273.15+temp)) + 14.844 -0.033*(temp+273.15) )}
K2calc<- function(temp) { 10^( (-2902.39/(273.15+temp)) + 6.498 -0.0238*(temp+273.15) )}
## Carbonate Chemistry from C & A
Carbfrom_C_A <- function(K1, K2, C, A){
H_minus <- (((-K1*C))-sqrt(((K1*C)^2)-(4*-1*A*2*K1*K2*C)))/(2*-1*A)
pH <- -1*log10(H_minus)
B <- (K1*C)/H_minus
Ca <- (K2*B)/H_minus
D <- C + B + Ca
A_check <- B + 2*Ca
l <- list(H_minus, pH, C, B, Ca, D, A, A_check)
names(l) <- c("H", "pH", "C", "B", "Ca", "D", "A","A check")
return(l)
}
## Carbonate Chemistry from D & A
Carbfrom_D1_A <- function(K1, K2, D1, A){
H_t <- ((-1*K1*(A-D1))+sqrt(((K1*(A-D1))^2) - (4*A*(A-D1)*K1*K2)))/(2*A)
pH_t <- -1*log10(H_t)
B_t <- (D1*K1*H_t)/((H_t^2)+(K1*H_t)+(K1*K2))
Ca_t <- (D1*K1*K2)/((H_t^2)+(K1*H_t)+(K1*K2))
C_t <- (H_t*B_t)/K1
D2 <- C_t + B_t + Ca_t
A2_check <- B_t + 2*Ca_t
l <- list(H_t, pH_t, C_t, B_t, Ca_t, D2, A, A2_check)
names(l) <- c("H", "pH", "C", "B", "Ca", "D", "A", "A check")
return(l)
}
###########################################################################
## Start by establishing the first DIC value using CO2 and alkalinity
###########################################################################
# Specify SampleID in pH_Alk_data
start_ID <- "Blaine_822_0600"
# Calc starting K1 and K2
K1 <- K1calc(dat$temp[1])
K2 <- K2calc(dat$temp[1])
# Calc starting A in mol/L
A1 <- pH_Alk_data[which(pH_Alk_data$SampleID == start_ID),]$Alk_mgLCaCO3
A1_molL <- A1*10^-6 ## actually convert to mol/L
D1_CarbEq <- Carbfrom_C_A(K1, K2, dat$CO2_molL[1], A1_molL)
View(D1_CarbEq)
Khcalc<- function(temp){
A1<- -58.0931
A2<- 90.5069
A3<- 22.2940
exp( A1 + A2*100/(273.15+temp) + A3*log( (273.15+temp)/100) )
}
Khcalc(25)
1/Khcalc(25)
#Calculate CO2 sat in mmol/l
csat<- function(temp,bp) {
c<- 400e-6*(bp/760)*Khcalc(temp)
c
}
csat(25,760)
View(D1_CarbEq)
View(pH_Alk_data)
View(dat)
View(dat)
## Equilibrium constants
K1calc<- function(temp) { 10^( (-3404.71/(273.15+temp)) + 14.844 -0.033*(temp+273.15) )}
K2calc<- function(temp) { 10^( (-2902.39/(273.15+temp)) + 6.498 -0.0238*(temp+273.15) )}
##need CO2 saturation equation
Khcalc<- function(temp){
A1<- -58.0931
A2<- 90.5069
A3<- 22.2940
exp( A1 + A2*100/(273.15+temp) + A3*log( (273.15+temp)/100) )
}
Khcalc(25)
1/Khcalc(25)
#Calculate CO2 sat in mmol/l
csat<- function(temp,bp) {
c<- 400e-6*(bp/760)*Khcalc(temp)
c
}
csat(25,760)
## Carbonate Chemistry from C & A
Carbfrom_C_A <- function(K1, K2, C, A){
H_minus <- (((-K1*C))-sqrt(((K1*C)^2)-(4*-1*A*2*K1*K2*C)))/(2*-1*A)
pH <- -1*log10(H_minus)
B <- (K1*C)/H_minus
Ca <- (K2*B)/H_minus
D <- C + B + Ca
A_check <- B + 2*Ca + (14-H_minus)
l <- list(H_minus, pH, C, B, Ca, D, A, A_check)
names(l) <- c("H", "pH", "C", "B", "Ca", "D", "A","A check")
return(l)
}
## Carbonate Chemistry from D & A
Carbfrom_D1_A <- function(K1, K2, D1, A){
H_t <- ((-1*K1*(A-D1))+sqrt(((K1*(A-D1))^2) - (4*A*(A-D1)*K1*K2)))/(2*A)
pH_t <- -1*log10(H_t)
B_t <- (D1*K1*H_t)/((H_t^2)+(K1*H_t)+(K1*K2))
Ca_t <- (D1*K1*K2)/((H_t^2)+(K1*H_t)+(K1*K2))
C_t <- (H_t*B_t)/K1
D2 <- C_t + B_t + Ca_t
A2_check <- B_t + 2*Ca_t + (14-H_t)
l <- list(H_t, pH_t, C_t, B_t, Ca_t, D2, A, A2_check)
names(l) <- c("H", "pH", "C", "B", "Ca", "D", "A", "A check")
return(l)
}
###########################################################################
## Start by establishing the first DIC value using CO2 and alkalinity
###########################################################################
# Specify SampleID in pH_Alk_data
start_ID <- "Blaine_822_0600"
# Calc starting K1 and K2
K1 <- K1calc(dat$temp[1])
K2 <- K2calc(dat$temp[1])
# Calc starting A in mol/L
A1 <- pH_Alk_data[which(pH_Alk_data$SampleID == start_ID),]$Alk_mgLCaCO3
A1_molL <- A1*10^-6 ## actually convert to mol/L
D1_CarbEq <- Carbfrom_C_A(K1, K2, dat$CO2_molL[1], A1_molL)
View(D1_CarbEq)
Carbfrom_C_A <- function(K1, K2, C, A){
H_minus <- (((-K1*C))-sqrt(((K1*C)^2)-(4*-1*A*2*K1*K2*C)))/(2*-1*A)
pH <- -1*log10(H_minus)
B <- (K1*C)/H_minus
Ca <- (K2*B)/H_minus
D <- C + B + Ca
A_check <- B + 2*Ca + (log10(14)-H_minus)
l <- list(H_minus, pH, C, B, Ca, D, A, A_check)
names(l) <- c("H", "pH", "C", "B", "Ca", "D", "A","A check")
return(l)
}
## Carbonate Chemistry from D & A
Carbfrom_D1_A <- function(K1, K2, D1, A){
H_t <- ((-1*K1*(A-D1))+sqrt(((K1*(A-D1))^2) - (4*A*(A-D1)*K1*K2)))/(2*A)
pH_t <- -1*log10(H_t)
B_t <- (D1*K1*H_t)/((H_t^2)+(K1*H_t)+(K1*K2))
Ca_t <- (D1*K1*K2)/((H_t^2)+(K1*H_t)+(K1*K2))
C_t <- (H_t*B_t)/K1
D2 <- C_t + B_t + Ca_t
A2_check <- B_t + 2*Ca_t + (log10(14)-H_t)
l <- list(H_t, pH_t, C_t, B_t, Ca_t, D2, A, A2_check)
names(l) <- c("H", "pH", "C", "B", "Ca", "D", "A", "A check")
return(l)
}
###########################################################################
## Start by establishing the first DIC value using CO2 and alkalinity
###########################################################################
# Specify SampleID in pH_Alk_data
start_ID <- "Blaine_822_0600"
# Need K1, K2, CO2 mol/L, and Alkalinity mol/L for Carbfrom_C_A function
# Calc starting K1 and K2
K1 <- K1calc(dat$temp[1])
K2 <- K2calc(dat$temp[1])
# Calc starting A in mol/L
A1 <- pH_Alk_data[which(pH_Alk_data$SampleID == start_ID),]$Alk_mgLCaCO3
A1_molL <- A1*10^-6 ## actually convert to mol/L
D1_CarbEq <- Carbfrom_C_A(K1, K2, dat$CO2_molL[1], A1_molL)
D1_CarbEq
A1_molL <- A1*(1/100.0869)*10^-6 ## actually convert to mol/L
# Calc starting A in mol/L
A1 <- pH_Alk_data[which(pH_Alk_data$SampleID == start_ID),]$Alk_mgLCaCO3
A1_molL <- A1*(1/100.0869)*(1/1000) ## actually convert to mol/L
D1_CarbEq <- Carbfrom_C_A(K1, K2, dat$CO2_molL[1], A1_molL)
D1_CarbEq
install_github("gholtgrieve/gassyPants")
library(devtools)
install_github("gholtgrieve/gassyPants")
library(gassyPants)
??gassyPants
## Blaine Creek Diel
library(lubridate)
library(plyr)
library(dplyr)
library(readr)
library(ggplot2)
library(cowplot)
library(reshape2)
library(data.table)
library(bayesbio)
library(tidyr)
library(tidyquant)
## Blaine Creek Diel
library(lubridate)
library(plyr)
library(dplyr)
library(readr)
library(ggplot2)
library(cowplot)
library(reshape2)
library(data.table)
library(bayesbio)
library(tidyr)
library(tidyquant)
library(lubridate)
library(plyr)
library(dplyr)
library(readr)
library(ggplot2)
library(cowplot)
library(reshape2)
library(data.table)
library(bayesbio)
library(tidyr)
library(tidyquant)
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/C isotopes/Diel Sampling/2018_08_10_BeaverCreek")
########
## O2 ##
########
O2raw <- read.csv("2018_08_10_Beaver_DOcompiled.csv", header=T)
O2raw$DateTime <- as.POSIXct(as.character(O2raw$Time), format="%Y-%m-%d %H:%M:%S")
########
## O2 ##
########
O2raw <- read.csv("2018_08_10_Beaver_DOcompiled.csv", header=T)
O2raw$DateTime <- as.POSIXct(as.character(O2raw$Time), format="%Y-%m-%d %H:%M:%S")
names(O2raw)
O2 <- O2[,c("DateTime","DO","Temp")]
O2 <- O2raw[,c("DateTime","DO","Temp")]
View(O2raw)
View(O2)
#########
## CO2 ##
#########
CO2raw <- read.csv("2018_08_10_BeaverCreek_CO2.csv", header=T)
## Fix datetime
CO2raw$DateTime <- lubridate::mdy_hms(paste(CO2raw$Date, CO2raw$Time))
CO2raw$DateTime <- as.POSIXct(as.character(CO2raw$DateTime), format="%Y-%m-%d %H:%M:%S")
View(CO2raw)
names(CO2raw)
CO2 <- CO2[,c(4,9)]
CO2 <- CO2raw[,c(4,9)]
View(CO2)
head(CO2)
CO2 <- CO2raw[,c(9,4)]
head(CO2)
names(CO2) <- c("DateTime","CO2ppm_LowR")
################
## Merged
################
CO2$DateTime <- floor_date(CO2$DateTime, unit = "5 seconds")
O2$DateTime <- floor_date(O2$DateTime, unit= "5 minutes")
View(O2)
View(CO2)
## If duplicates average across them
CO2 <- CO2 %>% group_by(as.numeric(CO2$DateTime)) %>% summarise_all(funs(mean))
Output <- merge(O2, CO2, by="DateTime")
View(Output)
sapply(CO2, class)
########
## O2 ##
########
O2raw <- read.csv("2018_08_10_Beaver_DOcompiled.csv", header=T)
O2raw$DateTime <- as.POSIXct(as.character(O2raw$Time), format="%Y-%m-%d %H:%M:%S")
O2 <- O2raw[,c("DateTime","DO","Temp")]
O2$DateTime <- floor_date(O2$DateTime, unit= "5 minutes")
#########
## CO2 ##
#########
CO2raw <- read.csv("2018_08_10_BeaverCreek_CO2.csv", header=T)
## Fix datetime
CO2raw$DateTime <- lubridate::mdy_hms(paste(CO2raw$Date, CO2raw$Time))
CO2raw$DateTime <- as.POSIXct(as.character(CO2raw$DateTime), format="%Y-%m-%d %H:%M:%S")
names(CO2raw)
CO2 <- CO2raw[,c(9,4)]
names(CO2) <- c("DateTime","CO2ppm_LowR")
View(CO2)
View(O2)
CO2$DateTime <- floor_date(CO2$DateTime, unit = "5 seconds")
## If duplicates average across them
CO2 <- CO2 %>% group_by(as.numeric(CO2$DateTime)) %>% summarise_all(funs(mean))
head(CO2)
CO2$CO2ppm_LowR <- as.numeric(as.character(CO2$CO2ppm_LowR))
CO2raw <- read.csv("2018_08_10_BeaverCreek_CO2.csv", header=T)
## Fix datetime
CO2raw$DateTime <- lubridate::mdy_hms(paste(CO2raw$Date, CO2raw$Time))
CO2raw$DateTime <- as.POSIXct(as.character(CO2raw$DateTime), format="%Y-%m-%d %H:%M:%S")
names(CO2raw)
CO2 <- CO2raw[,c(9,4)]
names(CO2) <- c("DateTime","CO2ppm_LowR")
CO2$CO2ppm_LowR <- as.numeric(as.character(CO2$CO2ppm_LowR))
CO2$DateTime <- floor_date(CO2$DateTime, unit = "5 seconds")
## If duplicates average across them
CO2 <- CO2 %>% group_by(as.numeric(CO2$DateTime)) %>% summarise_all(funs(mean))
################
## Merged
################
Output <- merge(O2, CO2[,c("DateTime")], by="DateTime")
View(Output)
################
## Merged
################
Output <- merge(O2, CO2, by="DateTime")
################
## Merged
################
Output <- merge(O2, CO2[,c("DateTime", "CO2ppm_LowR")], by="DateTime")
ggplot(Output, aes(DateTime, DO))+geom_point()
write.csv(Output, "2018_08_10_BeaverCreek_CompiledforBob.csv")
setwd("~/GitHub/CO2_headspace_code/Data")
list.files()
