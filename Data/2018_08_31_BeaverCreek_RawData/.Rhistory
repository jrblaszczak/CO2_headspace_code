par(mfrow=c(2,1))
plot(arima.sim(list(order=c(1,0,0), ar=.9), n=100), ylab="x",
main=(expression(AR(1)~~~phi==+.9)))
plot(arima.sim(list(order=c(1,0,0), ar=-.9), n=100), ylab="x",
main=(expression(AR(1)~~~phi==-.9)))
x <- seq(from=-1, to=1, by=0.001)
y <- dnorm(x)
plot(x,y)
x <- seq(from=0, to=1, by=0.001)
y <- dnorm(x)
plot(x,y)
## identify which distribution describes data
y <- dpois(x)
rnorm(0,0,1)
rnorm(1,0,1)
## Logistic growth model
LG_test <- stan("Biomodel_2019_03_25_LG.stan", data=stan_data_l$nwis_14211010,
chains=4,iter=1000)
stopCluster(cl)
lapply(c("plyr","dplyr","ggplot2","cowplot",
"rstan", "shinystan","gridExtra"), require, character.only=T)
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/Productivity Modeling/Bio Model in Stan/March 2019 Biomodel")
################################
## Data Import & Processing
###############################
data <- read.csv("NWIS_Disturbance_SiteYears.csv", header=T)
data$date <- as.POSIXct(as.character(data$date), format="%Y-%m-%d")
## Remove nwis_07191222
data <- data[-which(data$site_name == "nwis_07191222"),]
data$site_name <- factor(data$site_name)
## split list
l <- split(data, data$site_name)
rel_LQT <- function(x){
x$light_rel <- x$light/max(x$light)
x$temp_rel <- x$temp/max(x$temp)
x$tQ <- (x$Q-mean(x$Q))/sd(x$Q)
x$Q_95thresh <- ifelse(x$Q>quantile(x$Q, probs = 0.95), yes=1, no=0)
x$GPP_sd <- (x$GPP.upper - x$GPP)/1.96
x<-x[order(x$date),]
return(x)
}
dat <- lapply(l, function(x) rel_LQT(x))
install.packages(c("plyr","dplyr","ggplot2","cowplot",
"rstan", "shinystan","gridExtra", "tidyverse"))
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/Productivity Modeling/Bio Model in Stan/March 2019 Biomodel")
data <- read.csv("NWIS_Disturbance_SiteYears.csv", header=T)
data$date <- as.POSIXct(as.character(data$date), format="%Y-%m-%d")
## Remove nwis_07191222
data <- data[-which(data$site_name == "nwis_07191222"),]
data$site_name <- factor(data$site_name)
l <- split(data, data$site_name)
rel_LQT <- function(x){
x$light_rel <- x$light/max(x$light)
x$temp_rel <- x$temp/max(x$temp)
x$tQ <- (x$Q-mean(x$Q))/sd(x$Q)
x$Q_95thresh <- ifelse(x$Q>quantile(x$Q, probs = 0.95), yes=1, no=0)
x$GPP_sd <- (x$GPP.upper - x$GPP)/1.96
x<-x[order(x$date),]
return(x)
}
dat <- lapply(l, function(x) rel_LQT(x))
###############################
## Stan Code for different models
###############################
## set options
rstan_options(auto_write=TRUE)
lapply(c("plyr","dplyr","ggplot2","cowplot",
"rstan", "shinystan","gridExtra"), require, character.only=T)
data <- read.csv("NWIS_Disturbance_SiteYears.csv", header=T)
data$date <- as.POSIXct(as.character(data$date), format="%Y-%m-%d")
## Remove nwis_07191222
data <- data[-which(data$site_name == "nwis_07191222"),]
data$site_name <- factor(data$site_name)
## split list
l <- split(data, data$site_name)
rel_LQT <- function(x){
x$light_rel <- x$light/max(x$light)
x$temp_rel <- x$temp/max(x$temp)
x$tQ <- (x$Q-mean(x$Q))/sd(x$Q)
x$Q_95thresh <- ifelse(x$Q>quantile(x$Q, probs = 0.95), yes=1, no=0)
x$GPP_sd <- (x$GPP.upper - x$GPP)/1.96
x<-x[order(x$date),]
return(x)
}
dat <- lapply(l, function(x) rel_LQT(x))
###############################
## Stan Code for different models
###############################
## set options
rstan_options(auto_write=TRUE)
options(mc.cores=parallel::detectCores())
## function to create stan data list for each site
stan_data_compile <- function(x){
data <- list(Ndays=length(x$GPP), light = x$light_rel, GPP = x$GPP, Q_crit = x$Q_95thresh, tQ = x$tQ,
GPP_sd = x$GPP_sd)
return(data)
}
stan_data_l <- lapply(dat, function(x) stan_data_compile(x))
## Logistic growth model
LG_test <- rstan::stan("Biomodel_2019_03_27_LG_works.stan", data=stan_data_l$nwis_14211010,
chains=1,iter=500)
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/Productivity Modeling/Bio Model in Stan/April 2019 Biomodel")
lapply(c("plyr","dplyr","ggplot2","cowplot",
"rstan", "shinystan","gridExtra"), require, character.only=T)
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/Productivity Modeling/Bio Model in Stan/April 2019 Biomodel")
#
lapply(c("plyr","dplyr","ggplot2","cowplot",
"rstan", "shinystan","gridExtra"), require, character.only=T)
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/Productivity Modeling/Bio Model in Stan/April 2019 Biomodel")
#
data <- read.csv("NWIS_Disturbance_SiteYears.csv", header=T)
data$date <- as.POSIXct(as.character(data$date), format="%Y-%m-%d")
## Remove nwis_07191222
data <- data[-which(data$site_name == "nwis_07191222"),]
data$site_name <- factor(data$site_name)
l <- split(data, data$site_name)
rel_LQT <- function(x){
x$light_rel <- x$light/max(x$light)
x$temp_rel <- x$temp/max(x$temp)
x$tQ <- (x$Q-mean(x$Q))/sd(x$Q)
x$Q_95thresh <- ifelse(x$Q>quantile(x$Q, probs = 0.95), yes=1, no=0)
x$GPP_sd <- (x$GPP.upper - x$GPP)/1.96
x<-x[order(x$date),]
return(x)
}
dat <- lapply(l, function(x) rel_LQT(x))
## Load packages
lapply(c("plyr","dplyr","ggplot2","cowplot",
"rstan", "shinystan"), require, character.only=T)
## Import
data <- read.csv("NWIS_Disturbance_SiteYears.csv", header=T)
data$date <- as.POSIXct(as.character(data$date), format="%Y-%m-%d")
l <- split(data, data$site_name)
rel_LQT <- function(x){
x$light_rel <- x$light/max(x$light)
x$temp_rel <- x$temp/max(x$temp)
x$Q_rel <- x$Q/max(x$Q)
x$Q_95thresh <- ifelse(x$Q>quantile(x$Q, probs = 0.95), yes=1, no=0)
x<-x[order(x$date),]
return(x)
}
dat <- lapply(l, function(x) rel_LQT(x))
dat1 <- dat$nwis_14211010
dat2 <- dat$nwis_01400500
dat3 <- dat$nwis_04136000
LM <- function(phi, alpha, beta_0, pe, oe, df) {
## Data
Ndays<-length(df$GPP)
GPP <- df$GPP
light<-df$light_rel ## relativized light
Q_crit<-df$Q_95thresh ## arbitrary 95th quantile of flow
Q_rel <- df$Q_rel ## relativized discharge
## Error
# proc_err <- rnorm(1, mean = 0, sd = pe)
# obs_err <- rnorm(n=length(pred_GPP),mean = 0, sd = oe)
## Vectors for model output
pred_GPP<-numeric(length(GPP)+1)
pred_GPP[1] <- GPP[1]
for (j in 1:Ndays) {
pred_GPP[j+1] = (phi*pred_GPP[j] + alpha*light[j])*(1-Q_crit[j]) + beta_0*Q_crit[j]
# + proc_err
}
pred_GPP <- pred_GPP #+ obs_err
## visualize
plot(df$GPP, type="l", ylim=c(min(GPP), max(GPP)), ylab="GPP", xlab="DOY")
lines(pred_GPP, col="red")
abline(v=which(Q_crit > 0), col="purple")
legend("topright",legend=c("GPP","Predicted GPP"),col=c("black","red"), lty=1)
}
LM(phi=0.9, alpha=1, beta_0=0.2, pe=0.6, oe=0.7, df=dat1)
LM(phi=0.9, alpha=1, beta_0=0.2, pe=0.6, oe=0.7, df=dat2)
LM(phi=0.9, alpha=1, beta_0=0.2, pe=0.6, oe=0.7, df=dat3)
phi<-0.8
b<-2.4
sigp<-0.5
sigo<-0.5
X<-numeric(300)
X[1]<-12
for (t in 2:300) X[t]<- 2.4+ 0.9*X[t-1]+rnorm(1,0,sigp)
y<-X+(rnorm(300,0,sigo))
plot(y)
sink("state_space.stan")
cat("
data {
int<lower = 1> N;
vector[N] y;
}
parameters {
real <lower = 0, upper=1> phi;                // intercept
real b;                // slope
vector[N] X;  //state
real<lower = 0> sigma_obs; //  standard deviation
real<lower = 0> sigma_proc; //  standard deviation
}
model {
y ~ normal(X, sigma_obs); // observation model
X[1]~normal(y[1],0.01); //set initial state
for (i in 2:N){
X[i]~ normal(phi*X[i-1]+b, sigma_proc);//state model
}
phi~beta(1,1);
b~normal(0,5);
}
"
,fill=TRUE)
sink()
fakeSS_data <- list(N = length(y), y = y)
fit <- stan("state_space.stan", data = fakeSS_data,  iter = 1000, chains = 4)
View(fakeSS_data)
print(fit, pars=c("phi", "b", "sigma_obs", "sigma_proc"))
traceplot(fit, pars=c("phi", "b", "sigma_obs", "sigma_proc"))
fit_extract<-extract(fit)
plot(fit_extract$b, fit_extract$phi, pch=16, col= 'blue', cex=0.8)
## Productivity Model
lapply(c("plyr","dplyr","ggplot2","cowplot",
"rstan", "shinystan","gridExtra"), require, character.only=T)
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/Productivity Modeling/Bio Model in Stan/April 2019 Biomodel")
################################
## Data Import & Processing
###############################
data <- read.csv("NWIS_Disturbance_SiteYears.csv", header=T)
data$date <- as.POSIXct(as.character(data$date), format="%Y-%m-%d")
## Remove nwis_07191222
data <- data[-which(data$site_name == "nwis_07191222"),]
data$site_name <- factor(data$site_name)
## split list
l <- split(data, data$site_name)
rel_LQT <- function(x){
x$light_rel <- x$light/max(x$light)
x$temp_rel <- x$temp/max(x$temp)
x$tQ <- (x$Q-mean(x$Q))/sd(x$Q)
x$Q_95thresh <- ifelse(x$Q>quantile(x$Q, probs = 0.95), yes=1, no=0)
x$GPP_sd <- (x$GPP.upper - x$GPP)/1.96
x<-x[order(x$date),]
return(x)
}
dat <- lapply(l, function(x) rel_LQT(x))
##################################
## How are the data distributed?
###################################
vis_dist <- function(x){
plot_grid(
ggplot(x, aes(GPP)) + geom_histogram(),
ggplot(x, aes(Q_rel)) + geom_histogram(),
ggplot(x, aes(light_rel)) + geom_histogram(),
ggplot(x, aes(temp_rel)) + geom_histogram(),
ggplot(x, aes(Q_rel, GPP)) + geom_point(),
ggplot(x, aes(light_rel, GPP)) + geom_point(),
ncol=2, align="hv")
}
vis_ts <- function(x) { plot_grid(
ggplot(x, aes(date, GPP))+geom_point(color="chartreuse4")+labs(y = bquote('GPP (g'*~O[2]~ m^-2~d^-1*')'))+labs(x="Date"),
ggplot(x, aes(date, Q))+geom_line(color="darkblue")+ylab("Q (cms)"),
ggplot(x, aes(date, light_rel))+geom_line()+ylab("Light relative\n to annual maximum"),
ncol=1, align="hv")}
fig_ts <- function(x) { plot_grid(
ggplot(x, aes(date, GPP))+geom_line(color="chartreuse4")+geom_point(pch=21, color="chartreuse4")+
labs(y = bquote('GPP (g'*~O[2]~ m^-2~d^-1*')'))+labs(x="Date")+
theme(axis.title.x = element_blank(), axis.text.x = element_blank()),
ggplot(x, aes(date, Q))+geom_line(color="darkblue")+ylab("Q (cms)")+
theme(axis.title.x = element_blank(), axis.text.x = element_blank()),
ggplot(x, aes(date, light_rel))+geom_line()+ylab("Light relative\n to annual maximum"),
ncol=1, align="hv")}
fig_ts(dat$nwis_01608500)
fig_ts <- function(x) { plot_grid(
ggplot(x, aes(date, GPP))+geom_line(color="chartreuse4")+geom_point(pch=21, color="chartreuse4")+
labs(y = bquote('GPP (g'*~O[2]~ m^-2~d^-1*')'))+labs(x="Date")+
theme(axis.title.x = element_blank(), axis.text.x = element_blank())+
ggtitle(label="a"),
ggplot(x, aes(date, Q))+geom_line(color="darkblue")+ylab("Q (cms)")+
theme(axis.title.x = element_blank(), axis.text.x = element_blank()),
ggplot(x, aes(date, light_rel))+geom_line()+ylab("Light relative\n to annual maximum"),
ncol=1, align="hv")}
fig_ts(dat$nwis_01400500)
fig_ts <- function(x) {
name <- substring(deparse(substitute(x)),7)
plot_grid(
ggplot(x, aes(date, GPP))+geom_line(color="chartreuse4")+geom_point(pch=21, color="chartreuse4")+
labs(y = bquote('GPP (g'*~O[2]~ m^-2~d^-1*')'))+labs(x="Date")+
theme(axis.title.x = element_blank(), axis.text.x = element_blank())+
ggtitle(label=name),
ggplot(x, aes(date, Q))+geom_line(color="darkblue")+ylab("Q (cms)")+
theme(axis.title.x = element_blank(), axis.text.x = element_blank()),
ggplot(x, aes(date, light_rel))+geom_line()+ylab("Light relative\n to annual maximum"),
ncol=1, align="hv")}
fig_ts(dat$nwis_01400500)
fig_ts <- function(x) {
name <- substring(deparse(substitute(x)),10)
plot_grid(
ggplot(x, aes(date, GPP))+geom_line(color="chartreuse4")+geom_point(pch=21, color="chartreuse4")+
labs(y = bquote('GPP (g'*~O[2]~ m^-2~d^-1*')'))+labs(x="Date")+
theme(axis.title.x = element_blank(), axis.text.x = element_blank())+
ggtitle(label=name),
ggplot(x, aes(date, Q))+geom_line(color="darkblue")+ylab("Q (cms)")+
theme(axis.title.x = element_blank(), axis.text.x = element_blank()),
ggplot(x, aes(date, light_rel))+geom_line()+ylab("Light relative\n to annual maximum"),
ncol=1, align="hv")}
fig_ts(dat$nwis_01400500)
fig_ts <- function(x) {
name <- substring(deparse(substitute(x)),10)
plot_grid(
ggplot(x, aes(date, GPP))+geom_line(color="chartreuse4")+geom_point(pch=21, color="chartreuse4")+
labs(y = bquote('GPP (g'*~O[2]~ m^-2~d^-1*')'))+labs(x="Date")+
theme(axis.title.x = element_blank(), axis.text.x = element_blank())+
ggtitle(label=name),
ggplot(x, aes(date, Q))+geom_line(color="darkblue")+ylab("Q (cms)")+
theme(axis.title.x = element_blank(), axis.text.x = element_blank()),
ggplot(x, aes(date, light_rel))+geom_line()+ylab("Light relative\n to annual maximum"),
ncol=1, align="hv")}
fig_ts_plots <- lapply(dat, function(x) fig_ts(x))
lapply(names(plots),
function(x) ggsave(filename=paste(x,".jpeg",sep=""), plot=plots[[x]]))
lapply(names(fig_ts_plots),
function(x) ggsave(filename=paste(x,".jpeg",sep=""), plot=fig_ts_plots[[x]]))
names(dat)
head(data)
## split list
l <- split(data, c(data$site_name, data$year))
## split list
data$site_name_year <- paste(data$site_name," ",data$year)
head(data)
## split list
data$site_name_year <- paste(data$site_name,data$year)
head(data)
l <- split(data, data$site_name_year)
lapply(l, function(x) nrow(x))
lapply(c("plyr","dplyr","ggplot2","cowplot",
"rstan", "shinystan","gridExtra"), require, character.only=T)
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/Productivity Modeling/Bio Model in Stan/April 2019 Biomodel")
################################
## Data Import & Processing
###############################
data <- read.csv("NWIS_Disturbance_SiteYears.csv", header=T)
data$date <- as.POSIXct(as.character(data$date), format="%Y-%m-%d")
## Remove nwis_07191222
data <- data[-which(data$site_name == "nwis_07191222"),]
data$site_name <- factor(data$site_name)
## Notes
# nwis_01608500 has two years of continuous data
# nwis_08181500 has two years but separated
## split list by site-year
data$site_name_year <- paste(data$site_name,data$year)
l <- split(data, data$site_name_year)
rel_LQT <- function(x){
x$light_rel <- x$light/max(x$light)
x$temp_rel <- x$temp/max(x$temp)
x$tQ <- (x$Q-mean(x$Q))/sd(x$Q)
x$Q_95thresh <- ifelse(x$Q>quantile(x$Q, probs = 0.95), yes=1, no=0)
x$GPP_sd <- (x$GPP.upper - x$GPP)/1.96
x<-x[order(x$date),]
return(x)
}
dat <- lapply(l, function(x) rel_LQT(x))
lapply(c("plyr","dplyr","ggplot2","cowplot",
"rstan", "shinystan","gridExtra"), require, character.only=T)
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/Productivity Modeling/Bio Model in Stan/April 2019 Biomodel")
################################
## Data Import & Processing
###############################
data <- read.csv("NWIS_Disturbance_SiteYears.csv", header=T)
data$date <- as.POSIXct(as.character(data$date), format="%Y-%m-%d")
## Remove nwis_07191222
data <- data[-which(data$site_name == "nwis_07191222"),]
data$site_name <- factor(data$site_name)
## Notes
# nwis_01608500 has two years of continuous data
# nwis_08181500 has two years but separated
## split list by site-year
data$site_name_year <- paste(data$site_name,data$year)
l <- split(data, data$site_name_year)
rel_LQT <- function(x){
x$light_rel <- x$light/max(x$light)
x$temp_rel <- x$temp/max(x$temp)
x$tQ <- (x$Q-mean(x$Q))/sd(x$Q)
x$Q_95thresh <- ifelse(x$Q>quantile(x$Q, probs = 0.95), yes=1, no=0)
x$GPP_sd <- (x$GPP.upper - x$GPP)/1.96
x<-x[order(x$date),]
return(x)
}
dat <- lapply(l, function(x) rel_LQT(x))
fig_ts <- function(x) {
name <- substring(deparse(substitute(x)),10)
plot_grid(
ggplot(x, aes(date, GPP))+geom_line(color="chartreuse4")+geom_point(pch=21, color="chartreuse4")+
labs(y = bquote('GPP (g'*~O[2]~ m^-2~d^-1*')'))+labs(x="Date")+
theme(axis.title.x = element_blank(), axis.text.x = element_blank())+
ggtitle(label=name),
ggplot(x, aes(date, Q))+geom_line(color="darkblue")+ylab("Q (cms)")+
theme(axis.title.x = element_blank(), axis.text.x = element_blank()),
ggplot(x, aes(date, light_rel))+geom_line()+ylab("Light relative\n to annual maximum"),
ncol=1, align="hv")}
fig_ts_plots <- lapply(dat, function(x) fig_ts(x))
lapply(names(fig_ts_plots),
function(x) ggsave(filename=paste(x,".jpeg",sep=""), plot=fig_ts_plots[[x]]))
GvK_plots <- function(x){
ggplot(x, aes(K600, GPP))+geom_point()+
facet_wrap(~ site_name)+
theme(legend.position = "none",
strip.background = element_rect(fill = "white", color="black",linetype = "solid"),
panel.border = element_rect(color = "black", linetype = "solid"))+
geom_hline(yintercept = 0, linetype="dashed", color="grey40")+
labs(y = expression('Daily GPP (g '*~O[2]~ m^-2~d^-1*')'), x=expression('Daily'*~K[600]*' ('*~d^-1*')'))
}
GvK_plots(data)
GvK_plots <- function(x){
ggplot(x, aes(K600, GPP))+geom_point()+
facet_wrap(~ site_name_year)+
theme(legend.position = "none",
strip.background = element_rect(fill = "white", color="black",linetype = "solid"),
panel.border = element_rect(color = "black", linetype = "solid"))+
geom_hline(yintercept = 0, linetype="dashed", color="grey40")+
labs(y = expression('Daily GPP (g '*~O[2]~ m^-2~d^-1*')'), x=expression('Daily'*~K[600]*' ('*~d^-1*')'))
}
GvK_plots(data)
## Check for light relationships
GvL_plots <- function(x){
ggplot(x, aes(light, GPP))+geom_point()+
facet_wrap(~ site_name_year)+
theme(legend.position = "none",
strip.background = element_rect(fill = "white", color="black",linetype = "solid"),
panel.border = element_rect(color = "black", linetype = "solid"))+
geom_hline(yintercept = 0, linetype="dashed", color="grey40")+
labs(y = expression('Daily GPP (g '*~O[2]~ m^-2~d^-1*')'), x=expression(paste("Light (short wave radiation; W"*~m^-2~d^-1*")")))
}
GvL_plots(data)
lapply(l, function(x) cor.test(x$K600, x$GPP)) ## all correlations r < 0.40
## Check for light relationships
GvL_plots <- function(x){
ggplot(x, aes(light, GPP))+geom_point()+
facet_wrap(~ site_name_year)+
theme(legend.position = "none",
strip.background = element_rect(fill = "white", color="black",linetype = "solid"),
panel.border = element_rect(color = "black", linetype = "solid"))+
geom_hline(yintercept = 0, linetype="dashed", color="grey40")+
labs(y = expression('Daily GPP (g '*~O[2]~ m^-2~d^-1*')'), x=expression(paste("Light (short wave radiation; W"*~m^-2~d^-1*")")))
}
GvL_plots(data)
lapply(l, function(x) acf(x))
test <- l$`nwis_01400500 2013`
acf(test$GPP)
pacf(test$GPP)
??ggAcf
install.packages("forecast")
## Productivity Model
lapply(c("plyr","dplyr","ggplot2","cowplot",
"rstan", "shinystan","gridExtra","forecast"), require, character.only=T)
ggAcf(test$GPP)
plot_grid(
ggAcf(test$GPP),
ggPacf(test$GPP),
ncol=1
)
plot_grid(
ggAcf(test$GPP),
ggPacf(test$GPP)+theme(title = element_blank()),
ncol=1, align="hv"
)
## acf and pacf plots
acf_pacf_visualize <- functin(x){
plot_grid(
ggAcf(test$GPP),
ggPacf(test$GPP),
ncol=1, align="hv"
)
}
cf_plots <- lapply(l, function(x) acf_pacf_visualize(x))
## acf and pacf plots
acf_pacf_visualize <- function(x){
plot_grid(
ggAcf(test$GPP),
ggPacf(test$GPP),
ncol=1, align="hv"
)
}
cf_plots <- lapply(l, function(x) acf_pacf_visualize(x))
cf_plots$`nwis_01400500 2013`
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/Productivity Modeling/Bio Model in Stan/April 2019 Biomodel/ACF_PACF plots")
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/Productivity Modeling/Bio Model in Stan/April 2019 Biomodel/ACF_PACF plots")
lapply(names(cf_plots), function(x) ggsave(filename=paste(x,".jpeg",sep=""), plot=cf_plots[[x]]))
acf_pacf_visualize <- function(x){
plot_grid(
ggAcf(x$GPP),
ggPacf(x$GPP),
ncol=1, align="hv"
)
}
cf_plots <- lapply(l, function(x) acf_pacf_visualize(x))
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/Productivity Modeling/Bio Model in Stan/April 2019 Biomodel/ACF_PACF plots")
lapply(names(cf_plots), function(x) ggsave(filename=paste(x,".jpeg",sep=""), plot=cf_plots[[x]]))
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/C isotopes/Diel Sampling/2018_08_31_BeaverCreek_Processed")
setwd("C:/Users/Joanna/Dropbox (Duke Bio_Ea)/FLBS shared with Bob - Joanna/Projects/C isotopes/Diel Sampling/2018_08_31_BeaverCreek_Processed")
## Example
df <- read.csv("2018_08_31_BeaverDiel_Picarro.csv", header=T)
View(df)
names(df)
10*e-6
10^-6
e-6
1e-6
10^(-6)
names(df)
head(df)
df$Cg <- df$CO2*10^(-6)
head(df)
## Convert barometric pressure into atm from inHg to mmHg to atm
alt <- 901 #meter elevation at Blaine
df$Baro_atm <- (df$Baro_inHg*25.4*exp( (-9.80665*0.0289644*alt)/(8.31447*(273.15+15)) ) )/760
head(df)
## Find the partial pressure of the gas at atmos. pressure (pg_atm) by
## multiplying the gas volumetric concentration (Cg) by the atmospheric pressure (Baro_atm):
df$pg_atm <- df$Cg*df$Baro_atm
head(df)
